import{_ as s,o as n,c as a,X as o}from"./chunks/framework.3b4788da.js";const A=JSON.parse('{"title":"Redux Toolkit","description":"","frontmatter":{},"headers":[],"relativePath":"react/store/redux-toolkit/index.md","filePath":"react/store/redux-toolkit/index.md","lastUpdated":null}'),l={name:"react/store/redux-toolkit/index.md"},e=o(`<h1 id="redux-toolkit" tabindex="-1"><code>Redux Toolkit</code> <a class="header-anchor" href="#redux-toolkit" aria-label="Permalink to &quot;\`Redux Toolkit\`&quot;">​</a></h1><p><code>Redux Toolkit</code> 是官方推荐的编写 <code>Redux</code> 逻辑的方法，用以代替传统的 <code>Redux</code> 独立使用。 <code>Redux Toolkit</code> 构建了 <code>Redux</code> 建议的最佳实践，简化了大多数 <code>Redux</code> 任务，防止了常见错误，并使编写 <code>Redux</code> 应用程序变得更加容易。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@reduxjs/toolkit</span></span></code></pre></div><p>如果需要在 <code>React</code> 应用程序中使用还需要补充安装 <code>react-redux</code>：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm i react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">redux</span></span></code></pre></div><h2 id="创建-redux-store-存储" tabindex="-1">创建 <code>Redux Store</code> 存储 <a class="header-anchor" href="#创建-redux-store-存储" aria-label="Permalink to &quot;创建 \`Redux Store\` 存储&quot;">​</a></h2><p><code>Redux</code> 使用单一状态树，用一个对象 <code>store</code> 包含全部的应用层级状态，在应用程序中作为一个“ <strong>唯一数据源（SSOT）</strong> ”而存在。</p><p>根据开发习惯，一般使用 <code>src/store/index.js</code> 作为存储定义文件。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">configureStore</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@reduxjs/toolkit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义全局状态存储对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">configureStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">reducer</span><span style="color:#89DDFF;">:{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">exportdefault store</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="将-redux-提供给-react" tabindex="-1">将 <code>Redux</code> 提供给 <code>React</code> <a class="header-anchor" href="#将-redux-提供给-react" aria-label="Permalink to &quot;将 \`Redux\` 提供给 \`React\`&quot;">​</a></h2><p>利用 <code>React-Redux</code> 将 <code>store</code> 以上下文的形式提供给 <code>React</code> 应用程序，允许每一个组件都可以获取到存储状态。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Provider</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-redux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./store</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createRoot</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Providerstore</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">Provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="创建-redux-状态切片" tabindex="-1">创建 <code>Redux</code> 状态切片 <a class="header-anchor" href="#创建-redux-状态切片" aria-label="Permalink to &quot;创建 \`Redux\` 状态切片&quot;">​</a></h2><p>在 <code>Redux</code> 中，允许将全部状态进行切分，每一部分称为切片 <code>slice</code>。</p><p>TIP</p><p>切片（<code>slice</code>）的本质还是模块（<code>module</code>）。</p><p>以计数器切片为例，创建 <code>src/store/counter.slice.js</code> 文件，定义切片具体配置，然后获取并导出切片提供的 <code>reducer</code> 函数及 <code>action</code> 对象：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import{createSlice}from&quot;@reduxjs/toolkit&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 定义切片</span></span>
<span class="line"><span style="color:#A6ACCD;">const counterSlice =createSlice({</span></span>
<span class="line"><span style="color:#A6ACCD;">name:&quot;counter&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">initialState:{</span></span>
<span class="line"><span style="color:#A6ACCD;">value:0,</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">reducers:{</span></span>
<span class="line"><span style="color:#A6ACCD;">increment(state){</span></span>
<span class="line"><span style="color:#A6ACCD;">state.value+=1;</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">decrement(state){</span></span>
<span class="line"><span style="color:#A6ACCD;">state.value-=1;</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">incrementByAmount:(state,action)=&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">state.value+=action.payload;</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 导出切片名称</span></span>
<span class="line"><span style="color:#A6ACCD;">exportconst counterName = counterSlice.name;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 导出 store 需要的切片 reducer 函数</span></span>
<span class="line"><span style="color:#A6ACCD;">exportconst counterReducer = counterSlice.reducer;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 导出组件内需要的用于创建 action 对象的函数</span></span>
<span class="line"><span style="color:#A6ACCD;">exportconst{ increment, decrement, incrementByAmount }= counterSlice.actions;</span></span></code></pre></div><p>关于切片配置：</p><ul><li><code>name</code>：定义切片名称，用于为对切片状态和方法创建命名空间，为切片创建的完整 <code>action</code> 名称格式为 <code>[sliceName]/[actionName]</code></li><li><code>initialState</code>：切片初始状态，需定义为对象类型数据</li><li><code>reducers</code>：定义用于匹配 <code>action</code> 对象的切片状态修改方法，仅支持定义同步方法</li></ul><p>其中 <code>reducers</code> 配置方法均可以获取两个参数：</p><ul><li>参数 1：当前切片状态的 <code>Proxy</code> 对象，允许直接对状态接修改</li><li>参数 2：触发切片 <code>reducer</code> 函数的 <code>action</code> 对象，可以获取对应的 <code>payload</code> 用于自定义修改状态</li></ul><p>TIP</p><p>建议切片名称使用常量声明并导出，方便在切片内和 <code>store</code> 中同时使用同一名称。</p><h2 id="在-store-中添加切片-reducer-函数" tabindex="-1">在 <code>store</code> 中添加切片 <code>reducer</code> 函数 <a class="header-anchor" href="#在-store-中添加切片-reducer-函数" aria-label="Permalink to &quot;在 \`store\` 中添加切片 \`reducer\` 函数&quot;">​</a></h2><p>导入切片 <code>reducer</code> 函数在 <code>store</code> 内补充配置即可。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">counterName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">counterReducer</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./counter.slice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">configureStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">reducer</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">counterName</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> counterReducer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="在组件内使用并修改状态" tabindex="-1">在组件内使用并修改状态 <a class="header-anchor" href="#在组件内使用并修改状态" aria-label="Permalink to &quot;在组件内使用并修改状态&quot;">​</a></h2><p>通过 <code>react-redux</code> 获取 <code>store</code> 状态获取函数 <code>useSelector</code> 及状态修改触发函数 <code>dispatch</code> 的获取函数 <code>useDispatch</code>。</p><ul><li><code>useSelector</code>：参数需要传递一个回调函数，回调函数的参数值即为 <code>store</code> 最新状态，同时回调函数必须定义返回值，值为需要获取的切片状态</li><li><code>useDispatch</code>：执行后即可获取状态修改触发函数 <code>dispatch</code></li></ul><p>其中，<code>dispatch</code> 方法执行时，参数需要传递一个包含有 <code>type</code> 和 <code>payload</code> 属性的 <code>action</code> 对象，其中 <code>type</code> 属性描述希望如何修改状态，<code>payload</code> 是对应状态修改的载荷值。可以使用切片提供的 <code>action</code> 创建函数，执行时参数为 <code>payload</code> 属性值，执行后结果为对应的 <code>action</code> 对象，可直接作为 <code>dispatch</code> 方法参数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">useState</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">useSelector</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">useDispatch</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-redux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">increment</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">decrement</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">incrementByAmount</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./store/counter.slice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;">=()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">constcounter</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">useSelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">store</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">counter</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">constdispatch</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">useDispatch</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">setAmount</span><span style="color:#89DDFF;">]=</span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">constupdateAmount</span><span style="color:#89DDFF;">=(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">letnewAmount</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setAmount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newAmount</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">计数值：</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;buttononClick=</span><span style="color:#89DDFF;">{()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">increment</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&gt;增加</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">buttononClick</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">()=&gt;dispatch</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">decrement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">减小</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;inputtype=&quot;text&quot;value=</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> onChange=</span><span style="color:#89DDFF;">{(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#82AAFF;">updateAmount</span><span style="color:#A6ACCD;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;buttononClick=</span><span style="color:#89DDFF;">{()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">incrementByAmount</span><span style="color:#A6ACCD;">(amount))</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&gt;自定义</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>TIP</p><p>上例中，可以不使用 <code>action</code> 创建函数作为 <code>dispatch</code> 方法的参数，允许直接传递 <code>{ type, payload }</code> 类型对象。<code>increment</code> 执行结果为 <code>{ type: &quot;counter/increment&quot;, payload: undefined }</code>，即可看出命名空间效果。</p><h2 id="定义允许异步操作的-action" tabindex="-1">定义允许异步操作的 <code>action</code> <a class="header-anchor" href="#定义允许异步操作的-action" aria-label="Permalink to &quot;定义允许异步操作的 \`action\`&quot;">​</a></h2><p>在切片中定义异步操作需要使用 <code>createAsyncThunk</code>。此方法需要接收两个参数：</p><ul><li>参数 1：异步 <code>action</code> 名称，会作为 <code>action.type</code> 属性值</li><li>参数 2：异步任务函数</li></ul><p>其中，异步任务函数接收两个参数：</p><ul><li>参数 1：<code>payload</code>，组件内触发异步 action 时传递的载荷</li><li>参数 2：通过参数解构可以获取 <code>getState</code> 切片状态获取函数和 <code>action</code> 触发函数 <code>dispatch</code></li></ul><p><strong>JavaScript</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/store/counter.slice.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">exportconst incrementByAsync </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">createAsyncThunk</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">counterName</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/incrementByAsync</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">payload</span><span style="color:#89DDFF;">,{</span><span style="color:#A6ACCD;font-style:italic;">getState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">dispatch</span><span style="color:#89DDFF;">})</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">conststate</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">getState</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">constresponse</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">awaitfetchApi</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#82AAFF;">dispatch</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">incrementByAmount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/App.jsx</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">incrementByAsync</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./store/counter.slice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">buttononClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">()=&gt;</span><span style="color:#F07178;">dispatch</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">incrementByAsync</span><span style="color:#A6ACCD;">(10</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">异步增加</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,42),p=[e];function t(c,r,D,y,F,i){return n(),a("div",null,p)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
