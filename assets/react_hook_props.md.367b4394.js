import{_ as s,o as a,c as l,X as p}from"./chunks/framework.3b4788da.js";const C=JSON.parse('{"title":"props","description":"","frontmatter":{},"headers":[],"relativePath":"react/hook/props.md","filePath":"react/hook/props.md","lastUpdated":null}'),n={name:"react/hook/props.md"},o=p(`<h1 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props&quot;">​</a></h1><p>Props 是你传递给 JSX 标签的信息</p><h2 id="向组件传递props" tabindex="-1">向组件传递props <a class="header-anchor" href="#向组件传递props" aria-label="Permalink to &quot;向组件传递props&quot;">​</a></h2><ol><li><p>将props传递给子组件</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 父组件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Profile</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 子组件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Avatar</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">person</span><span style="color:#89DDFF;">={{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Lin Lanying</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">imageId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1bX5QH6</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">size</span><span style="color:#89DDFF;">={</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果 <code>person=</code> 后面的双花括号让你感到困惑，请记住，在 JSX 花括号中，<code>它们只是一个对象</code>。</p></div></li><li><p>在子组件中读取props</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 子组件</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Avatar</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在这里 person 和 size 是可访问的</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">解构 ({})</p><p>你可以通过在 <code>function Avatar</code> 之后直接列出它们的名字 <code>person, size</code> 来读取这些 props。这些 props 在 <code>({</code> 和 <code>})</code> 之间，并由逗号分隔。这样，你可以在 <code>Avatar</code> 的代码中使用它们，就像使用变量一样。</p></div></li></ol><h2 id="给prop指定一个默认值" tabindex="-1">给prop指定一个默认值 <a class="header-anchor" href="#给prop指定一个默认值" aria-label="Permalink to &quot;给prop指定一个默认值&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function Avatar({ person, size = 100 }) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">默认值</p><p>如果你想在没有指定值的情况下给 prop 一个默认值，你可以通过在参数后面写 <code>=</code> 和默认值来进行解构</p><ul><li>如果传递的props有值就会渲染对应的值</li><li>如果无值，就会渲染默认值</li></ul></div><h2 id="使用jsx展开语法传递props" tabindex="-1">使用jsx展开语法传递props <a class="header-anchor" href="#使用jsx展开语法传递props" aria-label="Permalink to &quot;使用jsx展开语法传递props&quot;">​</a></h2><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Profile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Avatar</span><span style="color:#89DDFF;"> {...</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">展开</p><p>传递props，如果需要每个值都传递，使用展开语法更方便、简洁</p><p>请克制地使用展开语法</p></div><h2 id="将jsx作为子组件传递" tabindex="-1">将jsx作为子组件传递 <a class="header-anchor" href="#将jsx作为子组件传递" aria-label="Permalink to &quot;将jsx作为子组件传递&quot;">​</a></h2><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Avatar</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Card</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">children</p><p>当您将内容嵌套在 JSX 标签中时，父组件将在名为 <code>children</code> 的 prop 中接收到该内容</p></div><div class="tip custom-block"><p class="custom-block-title">摘要</p><ul><li>要传递 props，请将它们添加到 JSX，就像使用 HTML 属性一样。</li><li>要读取 props，请使用 <code>function Avatar({ person, size })</code> 解构语法。</li><li>你可以指定一个默认值，如 <code>size = 100</code>，用于缺少值或值为 <code>undefined</code> 的 props 。</li><li>你可以使用 <code>&lt;Avatar {...props} /&gt;</code> JSX 展开语法转发所有 props，但不要过度使用它！</li><li>像 <code>&lt;Card&gt;&lt;Avatar /&gt;&lt;/Card&gt;</code> 这样的嵌套 JSX，将被视为 <code>Card</code> 组件的 <code>children</code> prop。</li><li>Props 是只读的时间快照：每次渲染都会收到新版本的 props。</li><li>你不能改变 props。当你需要交互性时，你可以设置 state。</li></ul></div>`,14),e=[o];function t(c,r,i,D,y,F){return a(),l("div",null,e)}const A=s(n,[["render",t]]);export{C as __pageData,A as default};
